# 
# Build Linux template
#
# It runs the 'configure' and 'make' commands to build the jdk,
# and then uploads the jdk image as artifact for later tests
# @param buildJavaVersion Java version to build and test, 
#                         e.g., "jdk", "jdk8u", "jdk11u".

parameters:
  buildJavaVersion: ""
  jdkBootDir: "/cygdrive/d/a/1/openjdk"
  javaHomeDir: "/cygdrive/d/a/1/java"

steps:
  # Set core.autocrlf input to keep Unix EOL
  - bash: git config --global core.autocrlf input
    displayName: "[Pre build] Configure crlf option"
  
  # checkout files of the openjdk repo that uses this template
  - checkout: self

  # Install necessary dependencies
  - powershell: |
      $ProgressPreference = 'SilentlyContinue';
      # pre install
      New-Item -Path $(Agent.BuildDirectory) -Name 'openjdk' -ItemType 'directory';
      New-Item -Path $(Agent.BuildDirectory) -Name 'temp' -ItemType 'directory';
      # cygwin
      Invoke-WebRequest -UseBasicParsing https://buildreqs.blob.core.windows.net/cygwin/setup-x86_64.exe -OutFile '$(Agent.BuildDirectory)\temp\cygwin.exe';
      Start-Process -Wait -FilePath '$(Agent.BuildDirectory)\temp\cygwin.exe' -ArgumentList '--packages wget,rsync,gnupg,git,autoconf,make,gcc-core,mingw64-x86_64-gcc-core,unzip,zip,cpio,curl,grep,perl --quiet-mode --download --local-install --delete-orphans --site https://mirrors.kernel.org/sourceware/cygwin/ --local-package-dir $(Agent.BuildDirectory)\cygwin_packages --root $(Agent.BuildDirectory)\cygwin64';
      # java home (jdk8)
      Invoke-WebRequest -UseBasicParsing "https://buildreqs.blob.core.windows.net/java/windows/jdk8u.zip" -OutFile '$(Agent.BuildDirectory)\temp\jdk8.zip';
      Expand-Archive -LiteralPath '$(Agent.BuildDirectory)\temp\jdk8.zip' -DestinationPath $(Agent.BuildDirectory)\temp\java;
      $directories = Get-ChildItem '$(Agent.BuildDirectory)\temp\java\jdk*'
      foreach ($directory in $directories) {
        New-Item -ItemType Junction -Path "$(Agent.BuildDirectory)\java" -Target $directory
      }
      # java boot
      if("${{ parameters.windowsBootJDKUri }}" -ne "") {
        Invoke-WebRequest -UseBasicParsing "${{ parameters.windowsBootJDKUri }}" -OutFile '$(Agent.BuildDirectory)\temp\jdk.zip';
      } elseif("${{ parameters.buildJavaVersion }}" -eq "jdk8u"){
        # java 8
        Invoke-WebRequest -UseBasicParsing "https://buildreqs.blob.core.windows.net/java/windows/jdk8u.zip" -OutFile '$(Agent.BuildDirectory)\temp\jdk.zip';
      } elseif("${{ parameters.buildJavaVersion }}" -eq "jdk11u"){
        # java 10
        Invoke-WebRequest -UseBasicParsing "https://buildreqs.blob.core.windows.net/java/windows/jdk10u.zip" -OutFile '$(Agent.BuildDirectory)\temp\jdk.zip';
      } elseif("${{ parameters.buildJavaVersion }}" -eq "jdk"){
        # java 13
        Invoke-WebRequest -UseBasicParsing "https://buildreqs.blob.core.windows.net/java/windows/jdk13u.zip" -OutFile '$(Agent.BuildDirectory)\temp\jdk.zip';
      }
      Expand-Archive -LiteralPath '$(Agent.BuildDirectory)\temp\jdk.zip' -DestinationPath $(Agent.BuildDirectory)\temp\openjdk;
      # java create symbolic link
      $directories = Get-ChildItem '$(Agent.BuildDirectory)\temp\openjdk\jdk*'
      foreach ($directory in $directories) {
        New-Item -ItemType Junction -Path "$(Agent.BuildDirectory)\openjdk" -Target $directory
      }
      # install vs2010 for jdk8u
      if("${{ parameters.buildJavaVersion }}" -eq "jdk8u"){
        Invoke-WebRequest -UseBasicParsing 'https://download.microsoft.com/download/D/B/C/DBC11267-9597-46FF-8377-E194A73970D6/vs_proweb.exe' -OutFile '$(Agent.BuildDirectory)\temp\vs2010.exe';
        Start-Process -Wait -FilePath '$(Agent.BuildDirectory)\temp\vs2010.exe' -ArgumentList '/q /norestart';
      }
    displayName: "[Pre build] Install dependencies"

  # Set environment variables
  - script: |
      echo ##vso[task.setvariable variable=JDK_BOOT_DIR]${{ parameters.jdkBootDir }}
      echo ##vso[task.setvariable variable=JAVA_HOME]${{ parameters.javaHomeDir }}
      echo ##vso[task.setvariable variable=Path]$(Agent.BuildDirectory)\openjdk\bin;$(Agent.BuildDirectory)\cygwin64\bin;%PATH%
    displayName: "[Pre build] Set environment variables"

  # Run configure to set up the upcoming building process
  - script: bash.exe -c "bash configure --with-boot-jdk=$(JDK_BOOT_DIR)"
    displayName: "[Build] configure"

  # make JDK/JRE
  - script: bash.exe -c "make images"
    displayName: "[Build] make"

  # make test-image
  - script: bash.exe -c "make test-image"
    displayName: "[Build] make test-image"

  - script: bash.exe -c "ls -R build"
  
  # Compress JDK image and jtreg library path
  - script: |
      bash.exe -c "tar -zvcf $(Pipeline.Workspace)/build.tar.gz -C $(Pipeline.Workspace)/openjdk \
          build/*/images/jdk \
          build/*/images/test"
    displayName: "[Post build] Compress build"

  # Publish build binaries as build artifact
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(Pipeline.Workspace)/build.tar.gz'
      artifact: '$(Agent.OS)_$(Agent.OSArchitecture)_build'
      publishLocation: 'pipeline'
    condition: succeededOrFailed()
    displayName: "[Post build] Publish build as artifact" 

  

