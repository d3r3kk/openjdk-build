# 
# Build Linux template
#
# It runs the 'configure' and 'make' commands to build the jdk,
# and then uploads the jdk image as artifact for later tests
# @param buildJavaVersion Java version to build and test, 
#                         e.g., "jdk", "jdk8u", "jdk11u".

parameters:
  buildJavaVersion: ""
  freetypeUri: "https://buildreqs.blob.core.windows.net/freetype/freetype-2.9.1.tar.gz"
  freetypeUriJDK8u: "https://buildreqs.blob.core.windows.net/freetype/freetype-2.5.3.tar.gz"
  agentBuildDirectory: "/cygdrive/d/a/1"

steps:
  # Download freetype
  - powershell: |
      if("${{ parameters.buildJavaVersion }}" -eq "jdk8u"){
        Invoke-WebRequest -UseBasicParsing "${{ parameters.freetypeUriJDK8u }}" -OutFile '$(Agent.BuildDirectory)\temp\freetype.tar.gz';
      } elseif("${{ parameters.buildJavaVersion }}" -eq "jdk11u"){
        Invoke-WebRequest -UseBasicParsing "${{ parameters.freetypeUri }}" -OutFile '$(Agent.BuildDirectory)\temp\freetype.tar.gz';
      } elseif("${{ parameters.buildJavaVersion }}" -eq "jdk"){
        Invoke-WebRequest -UseBasicParsing "${{ parameters.freetypeUri }}" -OutFile '$(Agent.BuildDirectory)\temp\freetype.tar.gz';
      }
    condition: eq('${{ parameters.buildJavaVersion }}', 'jdk8u')
    displayName: "[Pre build] Download freetype"

  # Extract freetype
  - script: bash.exe -c "tar --one-top-level=${{ parameters.agentBuildDirectory }}/temp/freetype --strip-components=1 -xzf ${{ parameters.agentBuildDirectory }}/temp/freetype.tar.gz"
    condition: eq('${{ parameters.buildJavaVersion }}', 'jdk8u')
    displayName: "[Pre build] Extract freetype"

  # Set env variables
  - script: |
      IF "${{ parameters.buildJavaVersion }}" == "jdk8u" (
        echo ##vso[task.setvariable variable=configureOptions]--with-boot-jdk=$(JDK_BOOT_DIR) --with-freetype-src=${{ parameters.agentBuildDirectory }}/temp/freetype
        echo ##vso[task.setvariable variable=makeTargets]images
        echo ##vso[task.setvariable variable=buildFolders]build/*/images/j2sdk-image
      ) ELSE IF "${{ parameters.buildJavaVersion }}" == "jdk11u" (
        echo ##vso[task.setvariable variable=configureOptions]--with-boot-jdk=$(JDK_BOOT_DIR)
        echo ##vso[task.setvariable variable=makeTargets]images test-image
        echo ##vso[task.setvariable variable=buildFolders]build/*/images/jdk build/*/images/test
      ) ELSE IF "${{ parameters.buildJavaVersion }}" == "jdk" (
        echo ##vso[task.setvariable variable=configureOptions]--with-boot-jdk=$(JDK_BOOT_DIR)
        echo ##vso[task.setvariable variable=makeTargets]images test-image
        echo ##vso[task.setvariable variable=buildFolders]build/*/images/jdk build/*/images/test
      )
    displayName: "[Pre build] Set env variables"

  # Run configure to set up the upcoming building process
  - script: bash.exe -c "bash configure $(configureOptions)"
    displayName: "[Build] configure"

  # make
  - script: bash.exe -c "make $(makeTargets)"
    displayName: "[Build] make"
  
  # Compress JDK image and jtreg library path
  - script: |
      bash.exe -c "tar -zvcf build.tar.gz $(buildFolders)"
    condition: succeeded()
    displayName: "[Post build] Compress build"

  # Publish build binaries as build artifact
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(Build.SourcesDirectory)\build.tar.gz'
      artifact: '$(Agent.OS)_$(Agent.OSArchitecture)_build'
      publishLocation: 'pipeline'
    condition: succeeded()
    displayName: "[Post build] Publish build as artifact" 

  

