# 
# Build Linux template
#
# It runs the 'configure' and 'make' commands to build the jdk,
# and then uploads the jdk image as artifact for later tests
# @param buildJavaVersion Java version to build and test, 
#                         e.g., "jdk", "jdk8u", "jdk11u".

parameters:
  buildJavaVersion: ""

steps:
  # checkout files of the openjdk repo that uses this template
  - checkout: self

  # Set env variables
  - bash: |
      case ${{ parameters.buildJavaVersion }} in
            jdk8u)
              echo "##vso[task.setvariable variable=JDK_BOOT_DIR]$JDK8_BOOT_DIR"
              echo "##vso[task.setvariable variable=makeTargets]images"
              echo "##vso[task.setvariable variable=buildFolders]build/*/images/j2sdk-image"
              ;;
            jdk11u)   
              echo "##vso[task.setvariable variable=JDK_BOOT_DIR]$JDK10_BOOT_DIR"
              echo "##vso[task.setvariable variable=makeTargets]images test-image"
              echo "##vso[task.setvariable variable=buildFolders]build/*/images/jdk build/*/images/test"
              ;;
            jdk)      
              echo "##vso[task.setvariable variable=JDK_BOOT_DIR]$JDK13_BOOT_DIR"
              echo "##vso[task.setvariable variable=makeTargets]images test-image"
              echo "##vso[task.setvariable variable=buildFolders]build/*/images/jdk build/*/images/test"
              ;;
      esac
    displayName: "[Pre build] Set env variables"

  # Run configure to set up the upcoming building process
  - bash: bash configure --with-boot-jdk=$(JDK_BOOT_DIR)
    displayName: "[Build] configure"

  # make
  - bash: make $(makeTargets)
    displayName: "[Build] make"
  
  # Compress build subfolders
  - bash: |
      tar -zvcf $(Pipeline.Workspace)/build.tar.gz $(buildFolders)
    condition: succeeded()
    displayName: "[Post build] Compress build"

  # Publish build binaries as build artifact
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(Pipeline.Workspace)/build.tar.gz'
      artifact: '$(Agent.OS)_$(Agent.OSArchitecture)_build'
      publishLocation: 'pipeline'
    condition: succeeded()
    displayName: "[Post build] Publish build as artifact" 

  

