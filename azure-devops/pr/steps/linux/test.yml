# 
# Test Linux template
#
# It runs jtreg tests on the jdk previously built,
# and then uploads the results as artifact
#
# @param buildJavaVersion Java version to build and test, 
#                         e.g., "jdk", "jdk8u", "jdk11u".

parameters:
  buildJavaVersion: ""

steps:
  # checkout files of the openjdk repo that uses this template
  - checkout: self

  # Set JDK_BOOT_DIR
  - bash: |
      case ${{ parameters.buildJavaVersion }} in
            jdk8u)    echo "##vso[task.setvariable variable=JDK_BOOT_DIR]$JDK8_BOOT_DIR";;
            jdk11u)   echo "##vso[task.setvariable variable=JDK_BOOT_DIR]$JDK10_BOOT_DIR";;
            jdk)      echo "##vso[task.setvariable variable=JDK_BOOT_DIR]$JDK13_BOOT_DIR";;
      esac
    displayName: "[Pre test] Set JDK_BOOT_DIR"

  # Download build artifact
  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: "current"
      artifactName: "$(Agent.OS)_$(Agent.OSArchitecture)_build"
      itemPattern: "**"
      targetPath: "$(Build.SourcesDirectory)"
    displayName: "[Pre test] Download build artifact"

  # Extract JDK
  # In case buildJavaVersion is jdk8u 'j2sdk-image' folder name changes to 'jdk'
  - bash: tar -xvf $(Build.SourcesDirectory)/build.tar.gz --transform s/j2sdk-image/jdk/
    displayName: "[Pre test] Extract build"

  # Run tests via jtreg (https://openjdk.java.net/jtreg/index.html)
  # JT_HOME is the path to jtreg 4.2.0 set in the docker image linux_amd64_agent
  # To update JTREG, update the linux_amd64_agent's Dockerfile
  - bash: |
      IMAGES_PATH=$(echo build/*/images)
      JTREG_BASIC_OPTIONS="-agentvm \
              -verbose:fail,error,summary \
              -ignore:quiet \
              -automatic \
              -xml \
              -vmoption:-Xmx512m \
              -timeoutFactor:4 \
              -testjdk:$IMAGES_PATH/jdk"
      if [ -n "$NATIVE_PATH" ]
      then
        JTREG_NATIVE="-nativepath:$IMAGES_PATH/test/$NATIVE_PATH"
      fi 
      if [ -n "$PROBLEM_LIST" ]
      then
        JTREG_PROBLEM_LIST="-exclude:$PROBLEM_LIST"
      fi

      $(JDK_BOOT_DIR)/bin/java -Xmx512m -jar $JT_HOME/lib/jtreg.jar \
                      $JTREG_BASIC_OPTIONS \
                      $JTREG_NATIVE \
                      $JTREG_PROBLEM_LIST \
                      $(JTREG_TESTS)
    displayName: "[Test] $(JTREG_TESTS)"

  # Publish test results to pipeline
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '**/*.jtr.xml' 
      searchFolder: '$(Build.SourcesDirectory)/JTwork'
      mergeTestResults: true
      failTaskOnFailedTests: false
      testRunTitle: "$(Agent.OS)_$(Agent.OSArchitecture)_$(TEST_RESULTS_ARTIFACT_NAME)"
      publishRunAttachments: true
    displayName: "[Post test] Publish JTwork test results"
    condition: succeededOrFailed()

  # Publish test report as pipeline artifact
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(Build.SourcesDirectory)/JTreport'
      artifact: '$(Agent.OS)_$(Agent.OSArchitecture)_JTreport_$(TEST_RESULTS_ARTIFACT_NAME)'
      publishLocation: 'pipeline'
    condition: succeededOrFailed()
    displayName: "[Post test] Publish JTreport as artifact"