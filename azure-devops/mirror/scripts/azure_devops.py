"""
Azure DevOps Module Class
"""
import typing
import time

import azure.devops.connection as azdo_connection
import azure.devops.released.core as azdo_core
import azure.devops.exceptions as azdo_exceptions
import azure.devops.released.git as azdo_git
import msrest


class AzureDevOps:
    __PAT: str
    """
    __PAT: the Azure DevOps Personal Access Token
    """

    ORGANIZATION_URL: str
    """
    ORGANIZATION_URL: the Azure DevOps Organization Url
    """

    PROJECT_ID: str
    """
    PROJECT_ID: id of the AzDO project inside the organization
    """
    git_client: azdo_git.GitClient
    core_client: azdo_core.CoreClient

    def __init__(self, pat: str, organization_url: str, project_id) -> None:
        self.__PAT = pat
        self.ORGANIZATION_URL = organization_url
        self.PROJECT_ID = project_id
        credentials = msrest.authentication.BasicAuthentication("", self.__PAT)
        azdo_connection.Connection = azdo_connection.Connection(
            base_url=self.ORGANIZATION_URL, creds=credentials
        )
        self.git_client = azdo_connection.Connection.clients.get_git_client()
        self.core_client = azdo_connection.Connection.clients.get_core_client()

    def get_repository_id(self, repository_name: str) -> str:
        """
        Find a repository id by using project id and repository name
        You can obtain the project id by using az client
        The repsitory name is case sensitive
        """
        id = None
        repositories = self.git_client.get_repositories(self.PROJECT_ID)
        for repository in repositories:
            if repository.name == repository_name:
                id = repository.id
        assert id is not None
        return id

    def create_pr(
        self,
        merge_result: bool,
        upstream_sha1: str,
        base_sha1: str,
        source_ref_name: str,
        target_ref_name: str,
        repository_id: str,
    ) -> None:
        """
        Create a PR on Azure DevOps
        merge_result: whether merge conflict exist, true: contains merge conflict
        upstream_sha1: sha1 of the upstream branch
        base_sha1: sha1 of the base branch
        source_ref_name: branch name of the source branch
        target_ref_name: branch name of the target branch
        repository_id: the id of the repository
        """
        timestamp = time.strftime("%Y-%m-%d")
        title_prefix = "" if merge_result is True else "MERGE CONFLICT: "
        title = f"{title_prefix}Merge upstream {upstream_sha1} into {base_sha1}"
        description = f"""GENERATED BY AUTOMATED MIRRORING SCRIPT
**NOTE** DO NOT ***SQUASH MERGE*** THIS PR, JUST USE MERGE
CREATED: {timestamp}"""
        try:
            self.git_client.create_pull_request(
                azdo_git.GitPullRequest(
                    # Java Platform Code Review
                    auto_complete_set_by=(
                        None
                        if merge_result is not True
                        else azdo_git.IdentityRef(
                            id="edc79015-f4ae-43f1-a716-2d47ee139e16"
                        )
                    ),
                    title=title,
                    description=description,
                    source_ref_name=source_ref_name,
                    target_ref_name=target_ref_name,
                    completion_options=azdo_git.GitPullRequestCompletionOptions(
                        merge_strategy=False, delete_source_branch=True
                    ),
                    reviewers=[
                        azdo_git.IdentityRefWithVote(
                            # Java Platform Code Review
                            id="edc79015-f4ae-43f1-a716-2d47ee139e16"
                        )
                    ],
                ),
                repository_id,
                self.PROJECT_ID,
            )
        except azdo_exceptions.AzureDevOpsServiceError as e:
            if (
                e.message
                == "TF401179: An active pull request for the source and target branch already exists."
            ):
                pass
            else:
                raise
